import pandas as pd
from aiogram import Dispatcher, Router, types
from aiogram.filters import Command
from io import BytesIO
from matplotlib import pyplot as plt
from core.parser import CodeRunRatingScraper
from core.parser.exceptions import *
from core.analytics import StatsCalculator, PlotBuilder
from .utils import format_date
from .texts.commands import CommandTexts
from .texts.info import InfoText
from .keyboards import help_keyboard
from .config import BotConfig

scraper = CodeRunRatingScraper()
router = Router()

async def on_startup(dispatcher: Dispatcher):
    try:
        scraper.load(BotConfig.PATH_TO_DATA)
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞ ({scraper.last_update})")
    except FileNotFoundError:
        print("‚ÑπÔ∏è –§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

@router.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        CommandTexts.START,
        reply_markup=help_keyboard
    )

@router.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.answer(
        CommandTexts.HELP,
        reply_markup=help_keyboard
    )

@router.message(Command("update"))
async def cmd_update(message: types.Message):
    if scraper._is_updating:
        await message.answer("üîÑ –ü–∞—Ä—Å–∏–Ω–≥ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        return
    try:
        progress_msg = await message.answer("‚è≥ –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ...")
        await scraper.update()
        scraper.save(BotConfig.PATH_TO_DATA)
        formatted_date = format_date(scraper.last_update)
        await message.answer(f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã ({formatted_date})")
        await progress_msg.delete()
    except DataCollectionError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

@router.message(Command("contact"))
async def cmd_contact(message: types.Message):
    await message.answer(InfoText.contact)

@router.message(Command("user_by_lang"))
async def cmd_lang_distr(message: types.Message):
    try:
        df = scraper.get_data()
        if df.empty:
            await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤\n"
                                 "–í—ã–ø–æ–ª–Ω–∏—Ç–µ /update")
            return

        progress_msg = await message.answer("‚è≥ –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫–∏...")
        fig_bar = PlotBuilder.plot_users_by_language_bar(df)
        fig_pie = PlotBuilder.plot_users_by_language_pie(df)

        def fig_to_bytes(fig: plt.Figure) -> bytes:
            buf = BytesIO()
            fig.savefig(buf, format='png', dpi=100, bbox_inches='tight')
            buf.seek(0)
            plt.close(fig)
            return buf.getvalue()

        bar_bytes = fig_to_bytes(fig_bar)
        pie_bytes = fig_to_bytes(fig_pie)        
        bar_photo = types.BufferedInputFile(bar_bytes, filename="lang_bar.png")
        pie_photo = types.BufferedInputFile(pie_bytes, filename="lang_pie.png")

        await message.answer_photo(
            photo=bar_photo,
            caption="üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ —è–∑—ã–∫–∞–º (—Å—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞)"
        )        
        await message.answer_photo(
            photo=pie_photo,
            caption="üç∞ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ —è–∑—ã–∫–∞–º (–∫—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞)"
        )

        await progress_msg.delete()

    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    
@router.message(Command("langcnt_by_user"))
async def cmd_user_langs_distr(message: types.Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∏–∞–≥—Ä–∞–º–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —è–∑—ã–∫–æ–≤
    """
    try:
        df = scraper.get_data()
        if df.empty:
            await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤\n"
                            "–í—ã–ø–æ–ª–Ω–∏—Ç–µ /update")
            return

        progress_msg = await message.answer("‚è≥ –°—Ç—Ä–æ–∏–º –¥–∏–∞–≥—Ä–∞–º–º—É...")
        fig = PlotBuilder.plot_languages_per_user_distribution(df)
        
        def fig_to_bytes(fig: plt.Figure) -> bytes:
            buf = BytesIO()
            fig.savefig(buf, format='png', dpi=100, bbox_inches='tight')
            buf.seek(0)
            plt.close(fig)
            return buf.getvalue()
        
        image_bytes = fig_to_bytes(fig)
        photo = types.BufferedInputFile(image_bytes, filename="user_langs_distr.png")
        
        await message.answer_photo(
            photo=photo,
            caption="üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —è–∑—ã–∫–æ–≤"
        )
        
        await progress_msg.delete()
    
    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    
@router.message(Command("user_stats"))
async def cmd_user_stats(message: types.Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /user_stats <–Ω–∏–∫>
    """
    try:
        username = message.text.split(maxsplit=1)[1].strip()
        df = scraper.get_data()
        
        if df.empty:
            await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞\n–í—ã–ø–æ–ª–Ω–∏—Ç–µ /update")
            return

        user_stats = StatsCalculator.group_by_user(df)
        user_data = user_stats[user_stats['–£—á–∞—Å—Ç–Ω–∏–∫'] == username]

        if user_data.empty:
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        tasks = user_data['–ó–∞–¥–∞—á–∏'].values[0]
        last_update = format_date(user_data['–î–∞—Ç–∞'].iloc[0])
        total_points = user_data['–ë–∞–ª–ª—ã_–û–±—â–∏–π'].values[0]
        total_place = user_data['–ú–µ—Å—Ç–æ_–û–±—â–∏–π'].values[0]

        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —è–∑—ã–∫–∞–º
        languages = []
        for col in user_data.columns:
            if col.startswith('–ë–∞–ª–ª—ã_'):
                lang = col.split('_')[1]
                points = user_data[col].values[0]
                place_str = user_data[f'–ú–µ—Å—Ç–æ_{lang}'].values[0]
                
                if pd.notna(points) and place_str.isdigit():
                    place = int(place_str)
                    languages.append({
                        'lang': lang,
                        'points': points,
                        'place': place
                    })

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —è–∑—ã–∫–∏ –ø–æ –±–∞–ª–ª–∞–º (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
        languages.sort(key=lambda x: x['points'], reverse=True)

        # –†–∞–∑–¥–µ–ª—è–µ–º —è–∑—ã–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—ã
        top_languages = []
        good_languages = []
        other_languages = []
        
        for lang in languages:
            if lang['lang'] != '–û–±—â–∏–π':
                if lang['place'] <= 10:
                    top_languages.append(lang)
                elif lang['place'] <= 20:
                    good_languages.append(lang)
                else:
                    other_languages.append(lang)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = [
            f"üë§ *{username}*",
            f"‚úÖ –†–µ—à–µ–Ω–æ –∑–∞–¥–∞—á: {tasks}",
            f"üïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Ä–µ—à–µ–Ω–∏–µ: {last_update}",
            "\n---\n",
            "üîπ *–û–±—â–∏–π –∑–∞—á—ë—Ç:*"
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        try:
            total_place_int = int(total_place)
            top100_row = user_stats[user_stats['–ú–µ—Å—Ç–æ_–û–±—â–∏–π'] == '100']
            top100_points = top100_row['–ë–∞–ª–ª—ã_–û–±—â–∏–π'].values[0] if not top100_row.empty else 0
            points_diff = abs(total_points - top100_points)
            
            if total_points >= top100_points:
                response.append(f"üìç {total_place} –º–µ—Å—Ç–æ ({total_points} –±–∞–ª–ª–æ–≤)")
                response.append(f"üìä +{points_diff} –±–∞–ª–ª–æ–≤ –Ω–∞–¥ —Ç–æ–ø-100")
            else:
                response.append(f"üìç {total_place} –º–µ—Å—Ç–æ ({total_points} –±–∞–ª–ª–æ–≤)")
                response.append(f"üìä -{points_diff} –±–∞–ª–ª–æ–≤ –¥–æ —Ç–æ–ø-100")
        except (ValueError, IndexError):
            response.append(f"üìç {total_place} –º–µ—Å—Ç–æ ({total_points} –±–∞–ª–ª–æ–≤)")

        # –î–æ–±–∞–≤–ª—è–µ–º —è–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
        if languages:
            response.append("\nüîπ *–Ø–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è:*")
            
            for lang in top_languages:
                response.append(f"üèÜ {lang['lang']} ‚Äì {lang['place']} –º–µ—Å—Ç–æ ({lang['points']})")
            
            for lang in good_languages:
                response.append(f"üìú {lang['lang']} ‚Äì {lang['place']} –º–µ—Å—Ç–æ ({lang['points']})")
                
            for lang in other_languages[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–æ–≤
                response.append(f"üî∏ {lang['lang']} ‚Äì {lang['place']} –º–µ—Å—Ç–æ ({lang['points']})")
        else:
            response.append("\nüîπ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —è–∑—ã–∫–∞–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è")

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—è—Ö
        has_fast_track = total_place_int <= 100 if 'total_place_int' in locals() else False
        has_merch = total_place_int <= 100 if 'total_place_int' in locals() else False
        has_certificate = total_place_int <= 300 if 'total_place_int' in locals() else False
        
        if not has_fast_track:
            has_fast_track = any(lang['place'] <= 10 for lang in languages)
        if not has_merch:
            has_merch = any(lang['place'] <= 10 for lang in languages)
        if not has_certificate:
            has_certificate = any(lang['place'] <= 20 for lang in languages)

        response.extend([
            "\n---\n",
            "üéÅ *–¢–µ–∫—É—â–∏–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏:*",
            "‚úÖ –§–∞—Å—Ç-—Ç—Ä–µ–∫" if has_fast_track else "‚ùå –§–∞—Å—Ç-—Ç—Ä–µ–∫",
            "‚úÖ –ú–µ—Ä—á CodeRun" if has_merch else "‚ùå –ú–µ—Ä—á CodeRun",
            "‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç" if has_certificate else "‚ùå –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç",
            "\n---\n",
            InfoText.about_reward
        ])

        await message.answer("\n".join(response), parse_mode="Markdown")

    except IndexError:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n/user_stats <–Ω–∏–∫>")
    except Exception as e:
        raise e
        # await message.answer(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

def register_commands(dp):
    dp.startup.register(on_startup)
    dp.include_router(router)