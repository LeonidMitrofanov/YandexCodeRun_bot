from aiogram import Dispatcher, Router, types
from aiogram.filters import Command
from io import BytesIO
from matplotlib import pyplot as plt
from core.parser import CodeRunRatingScraper
from core.parser.exceptions import *
from core.analytics import StatsCalculator, PlotBuilder
from .texts.commands import CommandTexts
from .texts.info import InfoText
from .keyboards import help_keyboard
from .config import BotConfig

scraper = CodeRunRatingScraper()
router = Router()

async def on_startup(dispatcher: Dispatcher):
    try:
        scraper.load(BotConfig.PATH_TO_DATA)
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞ ({scraper.last_update})")
    except FileNotFoundError:
        print("‚ÑπÔ∏è –§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

@router.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        CommandTexts.START,
        reply_markup=help_keyboard
    )

@router.message(Command("help"))
async def cmd_help(message: types.Message):
    await message.answer(
        CommandTexts.HELP,
        reply_markup=help_keyboard
    )

@router.message(Command("update"))
async def cmd_update(message: types.Message):
    if scraper._is_updating:
        await message.answer("üîÑ –ü–∞—Ä—Å–∏–Ω–≥ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        return
    try:
        progress_msg = await message.answer("‚è≥ –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ...")
        await scraper.update()
        scraper.save(BotConfig.PATH_TO_DATA)
        await message.answer(f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã ({scraper.last_update})")
        await progress_msg.delete()
    except DataCollectionError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

@router.message(Command("contact"))
async def cmd_contact(message: types.Message):
    await message.answer(InfoText.contact_text)

@router.message(Command("user_by_lang"))
async def cmd_lang_distr(message: types.Message):
    try:
        df = scraper.get_data()
        if df.empty:
            await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤\n"
                                 "–í—ã–ø–æ–ª–Ω–∏—Ç–µ /update")
            return

        progress_msg = await message.answer("‚è≥ –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫–∏...")
        fig_bar = PlotBuilder.plot_users_by_language_bar(df)
        fig_pie = PlotBuilder.plot_users_by_language_pie(df)

        def fig_to_bytes(fig: plt.Figure) -> bytes:
            buf = BytesIO()
            fig.savefig(buf, format='png', dpi=100, bbox_inches='tight')
            buf.seek(0)
            plt.close(fig)
            return buf.getvalue()

        bar_bytes = fig_to_bytes(fig_bar)
        pie_bytes = fig_to_bytes(fig_pie)        
        bar_photo = types.BufferedInputFile(bar_bytes, filename="lang_bar.png")
        pie_photo = types.BufferedInputFile(pie_bytes, filename="lang_pie.png")

        await message.answer_photo(
            photo=bar_photo,
            caption="üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ —è–∑—ã–∫–∞–º (—Å—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞)"
        )        
        await message.answer_photo(
            photo=pie_photo,
            caption="üç∞ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ —è–∑—ã–∫–∞–º (–∫—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞)"
        )

        await progress_msg.delete()

    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    
@router.message(Command("langcnt_by_user"))
async def cmd_user_langs_distr(message: types.Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∏–∞–≥—Ä–∞–º–º—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —è–∑—ã–∫–æ–≤
    """
    try:
        df = scraper.get_data()
        if df.empty:
            await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤\n"
                            "–í—ã–ø–æ–ª–Ω–∏—Ç–µ /update")
            return

        progress_msg = await message.answer("‚è≥ –°—Ç—Ä–æ–∏–º –¥–∏–∞–≥—Ä–∞–º–º—É...")
        fig = PlotBuilder.plot_languages_per_user_distribution(df)
        
        def fig_to_bytes(fig: plt.Figure) -> bytes:
            buf = BytesIO()
            fig.savefig(buf, format='png', dpi=100, bbox_inches='tight')
            buf.seek(0)
            plt.close(fig)
            return buf.getvalue()
        
        image_bytes = fig_to_bytes(fig)
        photo = types.BufferedInputFile(image_bytes, filename="user_langs_distr.png")
        
        await message.answer_photo(
            photo=photo,
            caption="üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —è–∑—ã–∫–æ–≤"
        )
        
        await progress_msg.delete()
    
    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

def register_commands(dp):
    dp.startup.register(on_startup)
    dp.include_router(router)